set nocompatible

" Plugins -------------------------------------------------- {{{
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

Plug 'itchyny/lightline.vim'
Plug 'wakatime/vim-wakatime'

Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'nordtheme/vim', { 'as': 'nord' }

call plug#end()
" }}}

syntax enable
filetype plugin indent on

" Options -------------------------------------------------- {{{
set encoding=utf-8

" Numbers
set number
set relativenumber

" Tabulation
set shiftwidth=4
set smarttab
set expandtab
set tabstop=8
set softtabstop=0

" Indentation
set autoindent
set smartindent

" Wrapping
set nowrap
set nolinebreak
set list

function! ToggleWrap()
    if &wrap
        set nowrap nolinebreak list
        nunmap j
        nunmap k
        nunmap $
        nunmap ^
        nunmap 0
        vunmap j
        vunmap k
        vunmap $
        vunmap ^
        vunmap 0
    else
        set wrap linebreak nolist
        nnoremap j gj
        nnoremap k gk
        nnoremap $ g$
        nnoremap ^ g^
        nnoremap 0 g0
        vnoremap j gj
        vnoremap k gk
        vnoremap $ g$
        vnoremap ^ g^
        vnoremap 0 g0
    endif
endfunction

command! -nargs=0 WrapToggle :call ToggleWrap()

" Navigation
set scrolloff=10
set whichwrap+=<,>,h,l

" Search
set ignorecase
set smartcase
set incsearch
set hlsearch

" Simplify work with buffers
set hidden
set confirm

" Disable helper files
set nobackup
set nowritebackup
set noswapfile

" Remove sounds
set noerrorbells
set visualbell
set t_vb=

" Misc
set mouse=a
set noshowmode
set showcmd
set showmatch
set matchtime=1
set timeoutlen=500
" }}}

" Mapping -------------------------------------------------- {{{
let mapleader = " "

" Remap escape
inoremap jk <esc>
inoremap <esc> <nop>
vnoremap jk <esc>
vnoremap <esc> <nop>

" Disable arrows
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Buffer actions
nnoremap <leader>w :w!<cr>
nnoremap <leader>qq :q!<cr>
nnoremap <leader>qw :wq<cr>
nnoremap <leader>bl :ls<cr>
nnoremap <leader>bc :bdel<cr>
nnoremap <leader>ba :bufdo bdel<cr>
nnoremap <leader>h :bprevious<cr>
nnoremap <leader>l :bnext<cr>

" Windows navigation
nnoremap <silent> <c-h> :wincmd h<cr>
nnoremap <silent> <c-j> :wincmd j<cr>
nnoremap <silent> <c-k> :wincmd k<cr>
nnoremap <silent> <c-l> :wincmd l<cr>

" Window dimensions
nnoremap <silent> <s-up> :resize +3<cr>
nnoremap <silent> <s-down> :resize -3<cr>
nnoremap <silent> <s-left> :vertical resize +3<cr>
nnoremap <silent> <s-right> :vertical resize -3<cr>

" Moving lines
nnoremap <silent> <s-j> :m .+1<cr>==
nnoremap <silent> <s-k> :m .-2<cr>==
inoremap <silent> <s-j> <esc>:m .+1<cr>==gi
inoremap <silent> <s-k> <esc>:m .-2<cr>==gi
vnoremap <silent> <s-j> :m '>+1<cr>gv=gv
vnoremap <silent> <s-k> :m '<-2<cr>gv=gv

" Fast configuration
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source &MYVIMRC<cr>

" Remap clear the highlighting from sensible
nnoremap <silent> <C-S> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-S>

" Misc
nnoremap H 0
nnoremap L $
" }}}

augroup restore_position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
augroup END

augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" Theme -------------------------------------------------- {{{
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set background=dark
colorscheme catppuccin_mocha

set fillchars+=vert:â”‚

highlight Normal guibg=NONE ctermbg=NONE
highlight EndOfBuffer guibg=NONE ctermbg=NONE
highlight VertSplit guibg=NONE ctermbg=NONE
" }}}

let g:lightline = { 'colorscheme': 'catppuccin_mocha' }
